#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usepackage{beamerthemesplit}
\usepackage{graphicx}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
PCIC Data Portal
\begin_inset Argument
status open

\begin_layout Plain Layout
PCIC Web Services
\end_layout

\end_inset


\end_layout

\begin_layout Author
Computational Support Group (and Greg)
\begin_inset Argument
status open

\begin_layout Plain Layout
CS Group + GM
\end_layout

\end_inset


\end_layout

\begin_layout Institute
Pacific Climate Impacts Consortium
\begin_inset Newline newline
\end_inset

University of Victoria
\begin_inset Newline newline
\end_inset

Victoria, BC
\begin_inset Argument
status open

\begin_layout Plain Layout
PCIC
\end_layout

\end_inset


\end_layout

\begin_layout Date
September 27, 2011
\end_layout

\begin_layout TitleGraphic
\begin_inset Graphics
	filename ../pcic_header3.png

\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset Graphics
	filename ../uvic.jpg
	scale 40

\end_inset


\end_layout

\begin_layout NoteItem
So first of all I want to start out by acknowledging the several others
 that took part in creating this demo.
 Everyone from the Computational Support Group has helped work on this:
 David Bronaugh, Hailey Eckstrand, and Paul Nienaber.
 Also PCIC's writer and editor Greg Maruszeczka helped out a bit with it.
 Not to mention the countless open source developer upon whose foundation
 we have been building.
\end_layout

\begin_layout BeginFrame
Outline
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout BeginFrame

\end_layout

\begin_layout Section
Data Storage (back-end)
\end_layout

\begin_layout BeginFrame
PostgreSQL / PostGIS
\end_layout

\begin_layout FrameSubtitle
\begin_inset Quotes eld
\end_inset

The world's most advanced Open Source database
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Relational database
\end_layout

\begin_layout Itemize
Fast!
\end_layout

\begin_layout Itemize
Sophisticated and expressive queries
\end_layout

\begin_layout Itemize
PostGIS provides spatial extensions
\end_layout

\begin_layout NoteItem
We put all of the CRMP data in PostgreSQL, because it allows us to properly
 model the relationships between the different entities in the system.
 The questions that people have about the data are always changing, so we
 need a storage method that can provide a sophisticated query language,
 but is also compact and expressive.
\end_layout

\begin_layout NoteItem
And since all of this data is spatially explicit, we have put in spatial
 extensions called PostGIS.
 PostGIS was written by a company from here in Victoria, starting 10 years
 ago, and has grown into the most advanced Open Source spatial database
 in the world.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame

\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout BeginFrame
Goals
\end_layout

\begin_layout Itemize
Give people data
\end_layout

\begin_layout NoteItem
The goals of our little project are pretty simple.
 We want to give people data.
\end_layout

\begin_layout BeginFrame
Goals
\end_layout

\begin_layout Itemize
Give people the data 
\emph on
that they need
\end_layout

\begin_layout NoteItem
OK, so it's a little broader than that.
 We want to give people the data that they actually need.
 And 
\emph on
only
\emph default
 the data that they need.
 Which is important, because we have an large array of users...
 an urban planner who only cares about the measurements in their area for
 the last few years, or a climate scientist who wants to know about everything
 in BC in the last 30 years.
 We needed a system that was flexible and could meet the needs of many users
 and doesn't waste resources by giving people much more information than
 that in which they are interested.
\end_layout

\begin_layout BeginFrame
Goals
\end_layout

\begin_layout Itemize
Give people the data (
\emph on
and its associated metadata
\emph default
) that they need
\end_layout

\begin_layout NoteItem
So, if we'r
\end_layout

\begin_layout Section
Data Storage (back-end)
\end_layout

\begin_layout BeginFrame
PostgreSQL / PostGIS
\end_layout

\begin_layout FrameSubtitle
\begin_inset Quotes eld
\end_inset

The world's most advanced Open Source database
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Relational database
\end_layout

\begin_layout Itemize
Fast!
\end_layout

\begin_layout Itemize
Sophisticated and expressive queries
\end_layout

\begin_layout Itemize
PostGIS provides spatial extensions
\end_layout

\begin_layout NoteItem
We put all of the CRMP data in PostgreSQL, because it allows us to properly
 model the relationships between the different entities in the system.
 The questions that people have about the data are always changing, so we
 need a storage method that can provide a sophisticated query language,
 but is also compact and expressive.
\end_layout

\begin_layout NoteItem
And since all of this data is spatially explicit, we have put in spatial
 extensions called PostGIS.
 PostGIS was written by a company from here in Victoria, starting 10 years
 ago, and has grown into the most advanced Open Source spatial database
 in the world.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout NoteItem
e giving out data, it's absolutely essential that we tell them what they're
 actually getting.
 And that necessitates passing along all associated metadata, directly attached
 to the data.
 Far too often, in the earth sciences, someone will post an unintelligible
 binary file on their FTP site, and will point to some obscure, unmaintained
 documentation for a description of how to read the data.
 FTP, by the way, was bleeding edge back in 1971 when it was written, but
 just like climate models, technology for transferring data has also advanced
 in the last 40 years.
 That doesn't work.
 There are no technological limits to us directly attaching the metadata
 and attributes to the data, and doing so 
\emph on
drastically 
\emph default
reduces the risk of errors being propagated and data being misconstrued
 and misunderstood.
\end_layout

\begin_layout BeginFrame
Goals
\end_layout

\begin_layout Itemize
Give people (
\emph on
and computers
\emph default
) the data and its associated metadata that they need
\end_layout

\begin_layout NoteItem
Oh yeah, another thing that I may not have mentioned.
 Why are we giving data to 
\emph on
people?
\emph default
 Why would we give data to a person, so that they can do some manual transformat
ions on it and then load it in to their analysis program.
 That's kind of silly, it's just busy-work for the person that they're not
 really interested in, so how about we take out the middleman and just let
 the computers talk to each other.
 What I'm getting at is that the data that we serve should be 
\emph on
format-agnostic 
\emph default
as much as is possible.
\end_layout

\begin_layout NoteItem
To that same extent, we only have three staff here whom are trained in computati
onal science, so their time is too valuable to be spent on the mundane manual
 handling of data requests like we do now.
 This is a job for a computer.
\end_layout

\begin_layout NoteItem
So, that's our one main goal here...
\end_layout

\begin_layout BeginFrame
Goals
\end_layout

\begin_layout Itemize
Save time/$$ on data management
\end_layout

\begin_deeper
\begin_layout Itemize
less time re-formatting data == more time analyzing data (the fun stuff)
\end_layout

\end_deeper
\begin_layout Itemize
Decrease (eliminate) time spent on data requests
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Data pull vs.
 push
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Increase the complexity of questions that can be asked about data
\end_layout

\begin_layout Itemize
Increase interactivity
\end_layout

\begin_layout Itemize
Reduce deve
\end_layout

\begin_layout Section
Data Storage (back-end)
\end_layout

\begin_layout BeginFrame
PostgreSQL / PostGIS
\end_layout

\begin_layout FrameSubtitle
\begin_inset Quotes eld
\end_inset

The world's most advanced Open Source database
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Relational database
\end_layout

\begin_layout Itemize
Fast!
\end_layout

\begin_layout Itemize
Sophisticated and expressive queries
\end_layout

\begin_layout Itemize
PostGIS provides spatial extensions
\end_layout

\begin_layout NoteItem
We put all of the CRMP data in PostgreSQL, because it allows us to properly
 model the relationships between the different entities in the system.
 The questions that people have about the data are always changing, so we
 need a storage method that can provide a sophisticated query language,
 but is also compact and expressive.
\end_layout

\begin_layout NoteItem
And since all of this data is spatially explicit, we have put in spatial
 extensions called PostGIS.
 PostGIS was written by a company from here in Victoria, starting 10 years
 ago, and has grown into the most advanced Open Source spatial database
 in the world.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Itemize
lopment time by modular development
\end_layout

\begin_layout NoteItem
...and by meeting that goal, we hoping to get a whole bunch of other goals
 on the side for free.
\end_layout

\begin_layout BeginFrame
Layer Approach
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename layer_diagram.pdf
	width 80text%

\end_inset


\end_layout

\begin_layout NoteItem
To meet all of these goals with limited resources, we have to do a couple
 of things.
 One is to subdivide the problem into smaller manageable tasks.
 Additionally we want to put a layer of abstraction between the native storage
 of the data and the applications that will be using the data.
 This stacked approach allows us to decouple the details of the data from
 the climate information which it represents.
 Because really when people say that want to share data, they actually want
 to share the information.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Data Storage (back-end)
\end_layout

\begin_layout BeginFrame
PostgreSQL / PostGIS
\end_layout

\begin_layout FrameSubtitle
\begin_inset Quotes eld
\end_inset

The world's most advanced Open Source database
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Relational database
\end_layout

\begin_layout Itemize
Fast!
\end_layout

\begin_layout Itemize
Sophisticated and expressive queries
\end_layout

\begin_layout Itemize
PostGIS provides spatial extensions
\end_layout

\begin_layout NoteItem
We put all of the CRMP data in PostgreSQL, because it allows us to properly
 model the relationships between the different entities in the system.
 The questions that people have about the data are always changing, so we
 need a storage method that can provide a sophisticated query language,
 but is also compact and expressive.
\end_layout

\begin_layout NoteItem
And since all of this data is spatially explicit, we have put in spatial
 extensions called PostGIS.
 PostGIS was written by a company from here in Victoria, starting 10 years
 ago, and has grown into the most advanced Open Source spatial database
 in the world.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Database Schema
\end_layout

\begin_layout Standard
\noindent
\begin_inset space \hspace{}
\length -75text%
\end_inset


\begin_inset Graphics
	filename crmp_db.pdf
	height 100theight%
	rotateOrigin center

\end_inset


\end_layout

\begin_layout NoteItem
The complete database schema looks like this...
\end_layout

\begin_layout BeginFrame
Database Schema
\end_layout

\begin_layout FrameSubtitle
simplified
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename simplified_db_schema.pdf
	width 80text%

\end_inset


\end_layout

\begin_layout NoteItem
...
 but boiled down to its essentials is more like this.
\end_layout

\begin_layout NoteItem
The way the database is laid out, it tracks the relationships of networks
 to stations to observations to flags.
 It can model the movement of stations (locations changing over time), switching
 of sensors, etc.
 For data extraction, we can select data in any way supported by SQL.
 For example, I can select all of the observations grouped by station sorted
 by time.
 Select observations grouped by variable.
 Select all of the observations from station grouped by the day, averaged
 across the day, throwing out days which don't meet a minimum threshold
 of sufficiency.
 All in milliseconds.
\end_layout

\begin_layout NoteItem
Additionally, PostGIS includes a vast array of spatial operations which
 allow us to do even more interesting things.
 For example, give me all of the observations that fall inside a particular
 polygon or are within some distance of a polyline (a road).
\end_layout

\begin_layout Section
Data Applications
\end_layout

\begin_layout Subsection
Geographic Data
\end_layout

\begin_layout BeginFrame
GeoServer
\end_layout

\begin_layout Itemize
Web application that serves geospatial data
\end_layout

\begin_layout Itemize
Conforms to OpenGIS Consortium's standards
\end_layout

\begin_deeper
\begin_layout Itemize
Web Mapping Service (WMS)
\end_layout

\begin_layout Itemize
Web Feature Service (WFS)
\end_layout

\begin_layout Itemize
Web Coverage Service (WCS)
\end_layout

\end_deeper
\begin_layout Itemize
Leave format definition/conversion to the geospatial experts
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Example
\end_layout

\begin_layout FrameSubtitle
\begin_inset CommandInset href
LatexCommand href
name "Station Locations"
target "http://medusa.pcic.uvic.ca/geoserver/web/"

\end_inset


\end_layout

\begin_layout Section
Data Storage (back-end)
\end_layout

\begin_layout BeginFrame
PostgreSQL / PostGIS
\end_layout

\begin_layout FrameSubtitle
\begin_inset Quotes eld
\end_inset

The world's most advanced Open Source database
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Relational database
\end_layout

\begin_layout Itemize
Fast!
\end_layout

\begin_layout Itemize
Sophisticated and expressive queries
\end_layout

\begin_layout Itemize
PostGIS provides spatial extensions
\end_layout

\begin_layout NoteItem
We put all of the CRMP data in PostgreSQL, because it allows us to properly
 model the relationships between the different entities in the system.
 The questions that people have about the data are always changing, so we
 need a storage method that can provide a sophisticated query language,
 but is also compact and expressive.
\end_layout

\begin_layout NoteItem
And since all of this data is spatially explicit, we have put in spatial
 extensions called PostGIS.
 PostGIS was written by a company from here in Victoria, starting 10 years
 ago, and has grown into the most advanced Open Source spatial database
 in the world.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename geoserver_example.png
	height 65pheight%

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection
Meteorological Data
\end_layout

\begin_layout BeginFrame
pydap
\end_layout

\begin_layout Itemize
OPeNDAP server written in python
\end_layout

\begin_layout Itemize
Implements the Open Data Access Protocol specification 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.opendap.org/pdf/ESE-RFC-004v1.2.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
General, well-defined protocol allows application developers to implement
 the standard
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
\begin_inset CommandInset href
LatexCommand href
name "Example: live data access"
target "http://windy.pcic.uvic.ca:8001/crmp/"

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename data_portal.png
	height 65pheight%

\end_inset


\end_layout

\begin_layout NoteItem
This website is running an OPeNDAP server named pydap.
 It sits there waiting for a request and when we request a page about a
 station, it goes directly to the database and retrieves all of the metadata
 and variable descriptions for a particular station.
\end_layout

\begin_layout NoteItem
I can go through and select which variables I want to download, then down
 at the bottom, there's a drop down box with the list of formats that I
 can download.
 When I click the download button, pydap goes directly to the database and
 selects all of the data that I have requested, does the format conversion
 on the fly and serves it up over HTTP.
 At present it can serve up data as ASCII, netcdf, or an Excel spreadsheet.
\end_layout

\begin_layout NoteItem
Additionally, because the data is served with an open protocol, data can
 be accessed extremely easily from any programming language which has an
 implementation of the OPeNDAP library.
 This means that technical researchers and application developers are able
 to easily write programs that access the data quickly and efficiently.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
\begin_inset CommandInset href
LatexCommand href
name "Example: more live data access"
target "http://windy.pcic.uvic.ca:8001/vic_forcings/forcings_new_symap_BC_22AUG2011_1950-2006_t0.nc.html"

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename forcings_map.png
	height 65pheight%

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
\begin_inset CommandInset href
LatexCommand href
name "Putting it all together"
target "http://medusa.pcic.uvic.ca/~bronaugh/js_mapping_libraries/geoserver_OL_3005.html"

\end_inset


\end_layout

\begin_layout FrameSubtitle
OpenLayers web map
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename web_map_mashup.png
	height 65pheight%

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
